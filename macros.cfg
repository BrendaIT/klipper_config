######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	## PETG
	#{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	## PLA
	#{% elif printer.heater_bed.target <= 65 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	## Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% endif %}



[delayed_gcode EXHAUST_OFF]
gcode:
	SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
	OFF  			#call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
	


#[gcode_macro CLEANNOZZLE]
#gcode:
	# Parameters
	# Iterations
#	{% set i = params.I|default(5)|int %}
	# Speed
#	{% set s = params.S|default(100)|int %}
	
#	CG28
#	SAVE_GCODE_STATE NAME=CLEANNOZZLE
#	G90																; absolute positioning
#	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
#	G0 Z0 F19500													; move down to nozzle brush
#	{% for iteration in range(i|int) %}
#		G0 X85 F{s*60}												; wipe back
#		G0 X115	F{s*60}												; wipe forth
#	{% endfor %}
#	G0 X115	F{s*60}													; wipe back
#	G0 Z10 F19500													; raise
#	RESTORE_GCODE_STATE NAME=CLEANNOZZLE
	
[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500 			; move to right of nozzle brush
	G0 Z0	F19500													; lower
	G0 X85 F2400													; wipe back
	G0 Z10	F19500													; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE
	
	
######################### PAUSE/RESUME/CANCEL #########################

#[gcode_macro CANCEL_PRINT]
#rename_existing: BASE_CANCEL_PRINT
#gcode:
#	SDCARD_RESET_FILE
#	PRINT_END
#	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
#[gcode_macro PAUSE]
#rename_existing: BASE_PAUSE
#gcode:
	# Parameters
#	{% set z = params.Z|default(10)|int %}																					; z hop amount
#	
#	{% if printer['pause_resume'].is_paused|int == 0 %}		
#		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
#		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
#		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
#		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
#		BASE_PAUSE																											; pause print
#		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
#			G91																												; relative positioning
#			G1 Z{z} F900																									; raise Z up by z hop amount
#		{% else %}
#			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
#			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#		{% endif %}
#		G90																													; absolute positioning
#		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
#		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
#		M104 S0																												; turn off hotend
#		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
#	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
#[gcode_macro RESUME]
#rename_existing: BASE_RESUME
#variable_zhop: 0
#variable_etemp: 0
#gcode:
	# Parameters
#	{% set e = params.E|default(2.5)|int %}
	
#	{% if printer['pause_resume'].is_paused|int == 1 %}
#		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
#		RESETRGB																											; reset LCD color
#		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
#		{% if etemp > 0 %}
#			M109 S{etemp|int}																								; wait for hotend to heat back up
#		{% endif %}
#		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
#		G91																													; relative positioning
#		M83																													; relative extruder positioning
#		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
#			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
#		{% else %}						
#			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
#		{% endif %}								
#		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
#		BASE_RESUME																											; resume print
#	{% endif %}

# Filament runout / change alias	
#[gcode_macro M600]
#gcode:
#	LCDRGB R=0 G=1 B=0	# Turn LCD green
#	PAUSE
	
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END)
#[delayed_gcode DISABLEFILAMENTSENSOR]	
#initial_duration: 1
#gcode:
#	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	
######################### CONFIG BACKUP #########################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
#[gcode_macro BACKUP_CFG]
#gcode:
#    RUN_SHELL_COMMAND CMD=backup_cfg
	
#[gcode_shell_command backup_cfg]
#command: sh /home/pi/gitbackup.sh
#timeout: 30.
#verbose: True

######################### SAFETY #########################

# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.55 HOLDCURRENT=0.55
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.55 HOLDCURRENT=0.55
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.55 HOLDCURRENT=0.55
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.55 HOLDCURRENT=0.55
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	
	
######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### CHAMBER TEMP WAIT #########################

# Wait for chamber temp, kick off wait loop if not already at temp
# !! I created this before temperature_wait existed. The only reason I still ise it is because it's cancelable.
# !! I honestly would not recommend using this, it's really junky,
# !! It pauses the print (if not at temp) during print_start, pausing CANNOT happen (properly at least) in the middle of a macro, so it requires PRINT_START being split into two parts. 
# !! There may be a more graceful way to fix this but I can't be bothered. "There is nothing more permanent than a temporary solution"

[gcode_macro M191]
variable_chambertargettemp: 0
gcode:
	# Parameters
	{% set s = params.S|default(1)|float %}
	
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={s}		   							; set target temp for reference outside of the macro (for the loop)
						
	{% if not printer["temperature_sensor chamber"].temperature >= s|float %}						; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
		{ action_respond_info("Chamber not at temp yet, pausing...") }					
			{% if not printer.pause_resume.is_paused %}					
				BASE_PAUSE														   							; pause if not already paused
			{% endif %}					
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   							; start wait loop
	{% else %}					
		{ action_respond_info("Chamber at or above temp, continuing...") }     							; ##IF CHAMBER TEMP IS ALREADY REACHED##
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0                           							; break wait loop if it happens to be running already (shouldn't be)
		{% if printer.pause_resume.is_paused %}					
			BASE_RESUME															   							; resume if paused (shouldn't be)
		{% endif %}					
		PRINT_START2													   								; run part 2 of PRINT_START
	{% endif %}
	
# This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-WAIT]
gcode:
	{% if printer["temperature_sensor chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|float %} ; ##IF CHAMBER TEMP IS REACHED##
		{ action_respond_info("Chamber at or above temp, continuing...") }
			{% if printer.pause_resume.is_paused %}
				BASE_RESUME														   											 ; break loop, resume print
				PRINT_START2											   												 ; run part 2 of PRINT_START
			{% endif %}
	{% else %}																											 ; ##IF CHAMBER TEMP IS NOT YET REACHED##
		{ action_respond_info("Chamber not at temp yet, waiting...") }
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=5						   											 ; continue waiting loop
	{% endif %}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

#[gcode_macro G32]
#gcode:
#	G28
#	ATTACH_PROBE_LOCK
#	BED_MESH_CLEAR
#	QUAD_GANTRY_LEVEL
#	G28 Z
#	DOCK_PROBE_UNLOCK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	SET_FAN_SPEED FAN=Exhaust SPEED=0		 		; turn off exhaust fan
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

#[gcode_macro BEEP]
#gcode:
	# Parameters
#	{% set i = params.I|default(1)|int %}
#	{% set beepms = params.BEEPMS|default(1)|int %}
#	{% set waitms = params.WAITPMS|default(1)|int %}
	
#    {% for beep in range(i|int) %}
#        SET_PIN PIN=beeper VALUE=0.8
#        G4 P{beepms}
#        SET_PIN PIN=beeper VALUE=0
#		G4 P{waitms}
#    {% endfor %}
	
######################### LCD RGB CONTROLS #########################

# Set LCD RGB at startup
#[delayed_gcode SETDISPLAYNEOPIXEL]
#initial_duration: 1
#gcode:
#	RESETRGB
	
# Default RGB
#[gcode_macro RESETRGB]
#gcode:
#	SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
#	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
#	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

# Example LCDRGB R=1 G=0 B=0
#[gcode_macro LCDRGB]
#gcode:
#	{% set r = params.R|default(1)|int %}
#	{% set g = params.G|default(1)|int %}
#	{% set b = params.B|default(1)|int %}

#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3
	


######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}
	
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED
	
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE
	
# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	SET_FAN_SPEED FAN=Exhaust SPEED=0  				; turn exhaust fan off
	SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
	SET_PIN PIN=caselight VALUE=0					; turn light off
	
######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros
# I did not write this.

#[gcode_macro DUMP_PARAMETERS]
#gcode:
#  {% set parameters = namespace(output = '') %}
#  {% for name1 in printer %}
#    {% for name2 in printer[name1] %}
#      {% set donotwant = ['bed_mesh','configfile'] %}
#      {% if name1 is not in donotwant %}
#        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
#        {% set parameters.output = parameters.output +  param + "\n" %}
#      {% endif %}
#      {% else %}
#        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
#        {% set parameters.output = parameters.output +  param + "\n" %}
#    {% endfor %}
#  {% endfor %}
#  {action_respond_info(parameters.output)}

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z

[gcode_macro EXERCISE]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=EXERCISE
	CG28
	G90                               ; absolute positioning
	G0 X175 Y10 Z5 F19500
	{% for wipe in range(i|int) %}
		#Fast up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			;G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F19500
			;M105                     ; keepalive (temp report)
		{% endfor %}
		#Slow up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F900
			M105                     ; keepalive (temp report)
		{% endfor %}
	{% endfor %}
	M106 S0                          ; disable fan
	RESTORE_GCODE_STATE NAME=EXERCISE

[gcode_macro test]
gcode:
	{action_respond_info(printer.gcode_move.position.z|string)}
	
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel|int) %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

	#
# Allows finer grained acceleration control for different types of print moves than those provided by SuperSlicer.
#
# Usage: 
# Make sure dynamic acceleration control under "Print settings" -> "Acceleration control" is disabled (e.g all values set to 0, even the greyed out ones).
# Setting "Machine limits" under "Printer settings" does not interfere with this macro.
# Paste the following into the "Printer settings" -> "Extrusion role change G-code" section.
#
#   SET_PRINT_MOVE_ACCEL MOVE=[extrusion_role] LAYER_NUM=[layer_num]
#
# Known issues:
# All "service" moves like travel, wipe, z-hop and internal moves between individual extrusions will be done with the acceleration of the print move that preceeded them.
# There is currently no known way to specify travel move acceleration separately from others (e.g as in SuperSlicer's "travel" acceleration) in a way that would not interfere
# or reset the values for the given print moves almost immediately.
#
[gcode_macro SET_PRINT_MOVE_ACCEL]
description: Sets different accelerations based on the type of the print move about to be executed.
gcode:
  # settings
  # acceleration values for different print moves
  {% set accelerations = ({
    #
    # custom move types
    #
    'Default'                 : 4500,  # default acceleration value if the print move is not provided or not recognized
    'FirstLayer'              : 3000,  # all print moves on first layer will be done with this acceleration

    #
    # move types from SuperSlicer
    #
    'ExternalPerimeter'       : 1500,  # slow down here to get less surface artefacts
    'ThinWall'                : 1500,  # sections of walls one perimeter thick
    'Perimeter'               : 3000,
    #
    'OverhangPerimeter'       : 4000,  # overhangs, and perimeters on external bridges
    'BridgeInfill'            : 6000,  # external (on actual bridges) and internal (supporting bridging layer above sparse infill)
    #
    'TopSolidInfill'          : 3000,  # solid infill on top layer. slow down here to get less surface artefacts
    'SolidInfill'             : 6000,  # solid internal infill
    'InternalInfill'          : 6000,  # sparse internal infill
    'GapFill'                 : 6000,  # space constrained between two outer extrusions, larger than one but thinner than two extrusion widths
    #
    'Skirt'                   : 3000,
    'SupportMaterial'         : 3000,
    'SupportMaterialInterface': 3000,
    'WipeTower'               : 3000
  }) %}

  # receive input
  {% set move = params.MOVE|string %}
  {% set layer_num = params.LAYER_NUM|default(0)|int %}  # layers start at 1
  {% set verbose = params.VERBOSE|default(0)|int %}

  # sanity checks and overrides
  {% set use_move = move %}

  {% if layer_num == 1 %}
    # override all accelerations for first layer
    {% set use_move = 'FirstLayer' %}

    {% if verbose != 0 %}
      {action_respond_info('Overriding print move "%s" to use FirstLayer accelerations.' % (move))}
    {% endif %}
    #
  {% elif use_move not in accelerations %}
    # use the default acceleration for unknown print moves, or when print move was not provided
    {% set use_move = 'Default' %}
    
    {% if verbose != 0 %}
      {action_respond_info('Unknown print move "%s", or print move not provided. Using default acceleration.' % (move))}
    {% endif %}
  {% endif %}

  # get acceleration value from above table
  {% set accel = accelerations[use_move] %}
  # half the acceleration value as per Klipper docs
  {% set accel_to_decel = (accel / 2)|int %}

  {% if verbose != 0 %}
    {action_respond_info('Changing acceleration for print move "%s" to accel: %d, accel_to_decel: %d' % (move, accel, accel_to_decel))}
  {% endif %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

  ##-------------------------------------------------------------------------

  
# Lighting Control
[gcode_macro lights_off]
gcode:
    SET_PIN PIN=caselight VALUE=0

[gcode_macro lights_on]
gcode:
    SET_PIN PIN=caselight VALUE=100

[gcode_macro lights_toggle]
gcode:
    {% if printer["output_pin caselight"].value == 100 %}
        lights_off
    {% else %}
        lights_on
    {% endif %}
#------------------------------------------

[gcode_macro start_probe]
variable_bed_temp: 0
gcode:
    # Save target temperature to bed_temp variable
    SET_GCODE_VARIABLE MACRO=start_probe VARIABLE=bed_temp VALUE={printer.heater_bed.target}
    # Disable bed heater
    M140
    # Perform probe
    PROBE
    # Call finish_probe macro at completion of probe
    finish_probe
#------------------------------------------

[gcode_macro finish_probe]
gcode:
    # Restore temperature
    M140 S{printer["gcode_macro start_probe"].bed_temp}
#-------------------------------------------

[gcode_macro G32]
gcode:
    LOWERCURRENT
    G90
    BED_MESH_CLEAR
	SET_VELOCITY_LIMIT ACCEL=4000
	CG28
    #G28
    QUAD_GANTRY_LEVEL
    G28 Z
    CALIBRATE_Z
    RESETCURRENT
    G0 X175 Y175 Z10 F3600
##-------------------------------------------
#[gcode_macro G32]
#gcode:
## G32 1
#    G90                             ; absolute positioning
#    BED_MESH_CLEAR
#    G28                             ; home all axes
#    QUAD_GANTRY_LEVEL
#    G28 Z
#    {% if not printer.quad_gantry_level.applied %}
#        # Save heater states
#        {% set prev_bed_temp = printer.heater_bed.target %}
#        {% set prev_ext_temp = printer.extruder.target %}
#        M140 S0
#        M104 S0
#        QUAD_GANTRY_LEVEL           ; QGL with heaters disabled to reduce interference
#        # Restore heater states and wait for extruder to reheat
#        M140 S{ prev_bed_temp }
#        M109 S{ prev_ext_temp }     
#        G28 Z                       ; Re home Z after QGL
#    {% endif %}
#    G0 X175 Y175 Z30 F3600          ; Go to center of build plate
#---------------------------------------
[gcode_macro Probe_Hot]
gcode:
    G32
    G0 X175 Y175 Z2
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=50 MAXIMUM=55
    M300 S100 P100
    M300 S120 P100

[gcode_macro test]
gcode:
	{action_respond_info(printer.gcode_move.position.z|string)}
##-------------------------------------------------------------

#[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#gcode:
#    SET_RETRACTION RETRACT_LENGTH=0.7 RETRACT_SPEED=25
#    SET_PRESSURE_ADVANCE ADVANCE=0.05322
#    INIT_PRINT BED_TEMP=110 EXTRUDER_TEMP=240    
#    G21  ;
#    G90  ;
#    G28   ;
#    G0  Z2 F4000  ;
#    M190 S80  ; Wait for Heat Bed temperature ( aspetta Temperatura Bed)
#    M190 S{BED_TEMP}  ;
#    M190 S[first_layer_bed_temperature]  ;
#   G0 X175 Y175 Z2 F4000 ;
#    BED=[first_layer_bed_temperature]
#    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=55 MAXIMUM=60  ;
#    G32  ;
#    BED_MESH_PROFILE LOAD=lihot2  ;
#    SET_GCODE_OFFSET Z_ADJUST=0.140 MOVE=1  ;
#    SET_PRESSURE_ADVANCE ADVANCE=0.042  ;
#    SET_PIN PIN=caselight_hotend VALUE=70
#    G1 X3.1 Y20 Z1 F3000.0 ; Move to start position
#    M109 S245  ;
#    M109 S[first_layer_temperature]  ;
#    M109 S{EXTRUDER_TEMP}  ;
#    M109 [T0] S240  ;
#    M300 S120 P100  ;
#    M300 S120 P120  ;
#    G92 E0                                   ;Reset Extruder
#    G1 Z5.0 F3000                       ;Move Z Axis up
#    G1 X3 Y30 Z0.30 F5000.0             ;Move to start position (1,30,.24)
#    G1 X3 Y230.0 Z0.30 F1500.0 E20      ;Draw the first 200mm line
#    G1 X3.5 Y230.0 Z0.30 F5000.0        ;Move to side a little
#    G1 X3.5 Y30 Z0.30 F1500.0 E20       ;Draw the second line
#    G92 E0                              ;Reset Extruder
#    G1 Z5.0 F3000                       ;Move Z Axis up
#---------------------------------------

[gcode_macro T1]
gcode:
    ACTIVATE_EXTRUDER extruder=extruder
    SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"'

[gcode_macro T0]
gcode:
    ACTIVATE_EXTRUDER extruder=extruder
    SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"'

[gcode_macro START_GCODE]
gcode:
  {% set svv = printer.save_variables.variables %}
  ACTIVATE_EXTRUDER extruder={svv.currentextruder}
  
#--------------------------------------

#[gcode_macro NOZZLE_CLEAN]
#gcode:
#    SAVE_GCODE_STATE NAME=BEFORE_CLEAN
#    {% if "z" not in printer.toolhead.homed_axes %}
#        G28                     ; Only G28 Home if needed
#    {% endif %}
#	G0 Z10 F3000                ; lift nozzle
#	G0 X79 Y355 F9000           ; move to nozzle brush
#    {% if printer.extruder.temperature < 200 and printer.extruder.target > 200 %}
#        M109 S{printer.extruder.target} ; wait for previous M104      
#    {% elif printer.extruder.temperature < 200 %}
#        M109 S200               ; Wait for min E temp
#    {% endif %}
#    M83                         ; set extruder to relative
#    G1 E3 F300                  ; extrude a little to soften tip
#    G1 E-4 F300                 ; retract filament 4mm
#	G0 Z6.200 F3000               ; move nozzle into brush
#    {% for wipe in range(10) %} ; wipe nozzle across brush
#        {% for coordinate in [(79,355),(129,355)] %}
#            G0 X{coordinate[0]} Y{coordinate[1]} F9000
#        {% endfor %}
#    {% endfor %}
#	G0 Z30 F3000                ; lift z 30mm
#    RESTORE_GCODE_STATE NAME=BEFORE_CLEAN
#------------------------------------------

#[delayed_gcode]
#Execute a gcode on a set delay. See the command template guide and command reference for more information.

#[delayed_gcode my_delayed_gcode]
#gcode:
#initial_duration: 0.0
#-------------------------------------------

[gcode_macro SLEEP]
#default_parameter_MS: 300000 ; pause duration in ms
gcode:
    {% set MS = params.MS|default(300000)|int %}
    G4 P{MS}
#------------------------------------------

[gcode_macro PRIME_LINE]
gcode: |
    {% set X = params.X|default(10)|float %} ; X-axis start position
    {% set Y = params.Y|default(3)|float %} ; Y-axis start position
    {% set AXIS = params.AXIS|default("X")|string|lower %} ; axis direction for prime line
    {% set PARK_SPEED = params.PARK_SPEED|default(300)|int %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %} ; prime line layer height
    {% set LENGTH = params.LENGTH|default(60)|float %} ; line length in mm
    {% set WIDTH = params.WIDTH|default(1.6)|float %} ; line width in mm
    {% set FILAMENT_WIDTH = params.FILAMENT_WIDTH|default(1.75)|float %} ; filament diameter in mm
    {% set SPEED = params.SPEED|default(16)|int %} ; line speed in mm/s
    {% set RETRACTION_LENGTH = params.RETRACTION_LENGTH|default(0.5)|float %} ; mm retraction after line printed
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|default(30)|int %} ; mm/s retraction speed after line printed
    {% set Z_LIFT = params.Z_LIFT|default(10)|float %} ; z lift after primed line
    {% set WIPE_LENGTH = params.WIPE_LENGTH|default(2)|float %} ; wipe after intro line
    {% set RESTORE = params.RESTORE|default(1)|int %} ; restore initial position after prime line 

    SAVE_GCODE_STATE NAME=prime_line_state

    M117 Intro line..
    G1 X{X} Y{Y} Z{LAYER_HEIGHT} F{(PARK_SPEED * 60)}; park
    G91
    G92 E0.0
    {% set FIRST_LENGTH = (LENGTH * 0.65)|round(2)|float %}
    {% set SECOND_LENGTH = (LENGTH - FIRST_LENGTH|float)|round(2)|float %}

    {% set filament_rate = WIDTH * LAYER_HEIGHT %}

    G1 {AXIS|upper}{FIRST_LENGTH} E{ ((filament_rate * FIRST_LENGTH)/FILAMENT_WIDTH) } F{(60*SPEED)} ; intro line
    G1 {AXIS|upper}{SECOND_LENGTH} E{ 1.25 * ((filament_rate * SECOND_LENGTH)/FILAMENT_WIDTH)|round(3) } F{(60*SPEED)} ; intro line

    {% if WIPE_LENGTH|int != 0 %}
        G1 {AXIS|upper}{WIPE_LENGTH} F{(60*SPEED)}
    {% endif %}

    {% if RETRACTION_LENGTH != 0 %}
        G92 E0.0
        G1 E{ (-1 * RETRACTION_LENGTH)} F{60 * RETRACTION_SPEED}
    {% endif %}

    {% if Z_LIFT > 0 %}
        G1 Z{Z_LIFT} F{(30*60)}
    {% endif %}

    CLEAR_SCREEN
	M400

    RESTORE_GCODE_STATE NAME=prime_line_state MOVE={RESTORE} MOVE_SPEED={PARK_SPEED}

#---------------------------------------- 

#[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
#gcode:
#    M400    ;
#    G92 E0                         ; zero the extruder
#    G1 E-4.0 F3600                ; retract filament
#    G91                            ; relative positioning
#    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
#    TURN_OFF_HEATERS                 ;
#    M106 S255                          ; turn off fan
#    G1 Z100 F3000                    ; move nozzle up 2mm
#    G90                            ; absolute positioning
#    G0  X320 Y5  F3600            ; park nozzle at rear
#    BED_MESH_CLEAR              ;
#    M84   ;
#   SET_PIN PIN=caselight_h VALUE=0  ;
#    SET_PIN PIN=caselight_hotend VALUE=0
#    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber_temperature target=30 max_speed=1.0   ;
#   G4 P300000  ;
#    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=50 MAXIMUM=55  ;
#    M106 S0  ;
#    SET_PIN PIN=caselight VALUE=0  ;
#    M81 ;
#-----------------------------------------

#[gcode_macro PAUSE]
#gcode:
#    SAVE_GCODE_STATE NAME=PAUSE_state
#    BASE_PAUSE
#    G91
#    G1 E-4 F2100
#    G1 Z50
#    G90
#    G1 X270 Y270 F6000
#-----------------------------------------

#[gcode_macro RESUME]
#gcode:
#    G91
#    G1 E-2 F2100
#    G90
#    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
#    BASE_RESUME

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_minimum.x|float + 1.0 %}
    {% set y_park = printer.toolhead.axis_minimum.y|float + 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME


[gcode_macro M600]

########### Gcode ############
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE

#    Use this command resume during a mid print filament swap (DONT USE OCTO/MAINSAIL/DWC RESUME)
[gcode_macro SWAP_RESUME] 
gcode:
    G91
    RESTORE_GCODE_STATE NAME=M600_state
    BASE_RESUME

#------------------------------------------
 
[gcode_macro CANCEL_PRINT]
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove
    TURN_OFF_HEATERS                  ;
    M106 S255                           ; turn off fan
    M104 Textruder S35           ;
    G1 Z50 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X10 Y10 F3600            ; park nozzle at rear
    BED_MESH_CLEAR              ;
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber_temperature target=30 max_speed=1.0 ;
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=40  ;
    #G4 P300000  ;
    #SET_TEMPERATURE_FAN_TARGET temperature_fan=exhaust_fan target=0 max_speed=0.3 ;
    M107     ;
    SET_PIN PIN=caselight VALUE=0  ;
    #M104 Textruder S0              ;
#------------------------------------------
 
[gcode_macro BABYSTEP_UP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1
    
[gcode_macro BABYSTEP_DOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1
#-------------------------------------------------

[gcode_macro BABYSTEP_UP10]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=1.0 MOVE=1

[gcode_macro BABYSTEP_UP01]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.1 MOVE=1

[gcode_macro BABYSTEP_UP001]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

#----------------------
[gcode_macro BABYSTEP_DOWN10]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-1.0 MOVE=1

[gcode_macro BABYSTEP_DOWN01]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.1 MOVE=1

[gcode_macro BABYSTEP_DOWN001]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro PRE_HOT_BED]
gcode:
    G28
    G0 X300 Y10 Z200
    M190 S110
    G4 P480000
    M300 S100 P1000
    M300 S120 P1000
    M300 S140 P1000
    M300 S150 P100
    M300 S150 P100
#--------------------------------------

[gcode_macro PROBE_COOL]
gcode:
    G28
    G0 X300 Y10 Z200
    M106 S255
    
    M300 S100 P1000
    M300 S120 P1000
    
##----------------------------------------------------------
[gcode_macro Z_CALIBRATE]
gcode:
    Z_ENDSTOP_CALIBRATE
##---------------------------------------------------------

[gcode_macro PROBE_ACURAT]
gcode:
    PROBE_ACCURACY
##---------------------------------------------------------
[gcode_macro PROBE_CALIBRA]
gcode:
    PROBE_CALIBRATE
##--------------------------------------------------------    
[gcode_macro ACCETTA]
gcode:
    ACCEPT
##------------------------------------------------------
[gcode_macro SALVA]
gcode:
    SAVE_CONFIG
##-----------------------------------------------------
[gcode_macro PID_BED]
gcode:
    G28
    G0 X300 Y20 Z200
    PID_CALIBRATE HEATER=heater_bed TARGET=100 WRITE_FILE=1
##-----------------------------------------------------
[gcode_macro PID_HOTEND]
gcode:
    G28
    G0 X175 Y175 Z175
    M106 S77
    PID_CALIBRATE HEATER=extruder TARGET=240 WRITE_FILE=1
    M107
##----------------------------------------------------------
[gcode_macro alza_uggello]
gcode:
    G28
    G0 X300 Y10 Z200 F3500

[gcode_macro EXAUSTOR_ON]
gcode:
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber_temperature target=10 max_speed=1.0

[gcode_macro EXAUSTOR_OFF]
gcode:
    SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber_temperature target=60 max_speed=1.0
##------------------------------------------------

[gcode_macro EXERCISE]
gcode:
	G0 X175 Y0 Z5 F18000
	G0 X175 Y350 Z320 F18000
	G0 X175 Y0 Z5 F18000
	G0 X175 Y350 Z320 F18000
	G0 X175 Y0 Z5 F18000
	G0 X175 Y350 Z320 F18000
	G0 X175 Y0 Z5 F18000
	G0 X175 Y350 Z320 F1200
	G0 X175 Y0 Z5 F18000
	G0 X175 Y350 Z320 F1200
	G0 X175 Y0 Z5 F18000
	G0 X175 Y350 Z320 F1200
##-------------------------------------------------

[gcode_macro PARKFRONT]
gcode:
	CG28 ; Home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90 ; absolute positioning
	G0 X175 Y0 Z175 F18000
	RESTORE_GCODE_STATE NAME=PARKFRONT
##-----------------------------------------------------
[gcode_macro PARKREAR]
gcode:
	CG28 ; Home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90 ; absolute positioning
	G0 X0 Y350 Z300 F18000
	RESTORE_GCODE_STATE NAME=PARKREAR
##--------------------------------------------------
[gcode_macro PARKCENTER]
gcode:
	CG28 ; Home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90 ; absolute positioning
	G0 X175 Y175 Z175 F18000
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
[gcode_macro PARKBED]
gcode:
	CG28 ; Home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90 ; absolute positioning
	G0 X175 Y175 Z5 F18000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro REFERENCE_INDEX]
gcode:
    G0 X271.65 Y78.33 Z5 F18000

[output_pin ps_on]
pin: PE11
#pin: host:gpiochip0/gpio8
value: 1.0
shutdown_value:0.0

[gcode_macro M81]
gcode:
    SET_PIN PIN=ps_on VALUE=0
#    SET_PIN PIN=rest VALUE=0

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[idle_timeout]
gcode:
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

[gcode_macro POWER_OFF_PRINTER]
gcode:
    SET_PIN PIN=ps_on VALUE=0 

[gcode_macro _SHUTDOWN_PI]
description: Helper: Power down the rPi
gcode:
  {action_call_remote_method("shutdown_machine")}

  
##----------------------------------------------------------------------------------------
[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %}
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE={S}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


#[gcode_macro M300]
#gcode:
#    # Use a default 1kHz tone if S is omitted.
#    {% set S = params.S|default(1000)|int %}
#    # Use a 10ms duration is P is omitted.
#    {% set P = params.P|default(100)|int %}
#    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#    G4 P{P}
#    SET_PIN PIN=BEEPER_pin VALUE=0